package com.example.newbiechen.ireader.model.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.newbiechen.ireader.model.bean.BookBean;
import com.example.newbiechen.ireader.model.bean.BookHelpfulBean;
import com.example.newbiechen.ireader.model.gen.convert.BookConvert;
import com.example.newbiechen.ireader.model.gen.convert.BookHelpfulConvert;

import com.example.newbiechen.ireader.model.bean.BookReviewBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_REVIEW_BEAN".
*/
public class BookReviewBeanDao extends AbstractDao<BookReviewBean, String> {

    public static final String TABLENAME = "BOOK_REVIEW_BEAN";

    /**
     * Properties of entity BookReviewBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, String.class, "_id", true, "_ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Book = new Property(2, String.class, "book", false, "BOOK");
        public final static Property Helpful = new Property(3, Long.class, "helpful", false, "HELPFUL");
        public final static Property LikeCount = new Property(4, int.class, "likeCount", false, "LIKE_COUNT");
        public final static Property HaveImage = new Property(5, boolean.class, "haveImage", false, "HAVE_IMAGE");
        public final static Property State = new Property(6, String.class, "state", false, "STATE");
        public final static Property Updated = new Property(7, String.class, "updated", false, "UPDATED");
        public final static Property Created = new Property(8, String.class, "created", false, "CREATED");
    }

    private final BookConvert bookConverter = new BookConvert();
    private final BookHelpfulConvert helpfulConverter = new BookHelpfulConvert();

    public BookReviewBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BookReviewBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_REVIEW_BEAN\" (" + //
                "\"_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: _id
                "\"TITLE\" TEXT," + // 1: title
                "\"BOOK\" TEXT," + // 2: book
                "\"HELPFUL\" INTEGER," + // 3: helpful
                "\"LIKE_COUNT\" INTEGER NOT NULL ," + // 4: likeCount
                "\"HAVE_IMAGE\" INTEGER NOT NULL ," + // 5: haveImage
                "\"STATE\" TEXT," + // 6: state
                "\"UPDATED\" TEXT," + // 7: updated
                "\"CREATED\" TEXT);"); // 8: created
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_BOOK_REVIEW_BEAN_STATE ON BOOK_REVIEW_BEAN" +
                " (\"STATE\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_REVIEW_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookReviewBean entity) {
        stmt.clearBindings();
 
        String _id = entity.get_id();
        if (_id != null) {
            stmt.bindString(1, _id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        BookBean book = entity.getBook();
        if (book != null) {
            stmt.bindString(3, bookConverter.convertToDatabaseValue(book));
        }
 
        BookHelpfulBean helpful = entity.getHelpful();
        if (helpful != null) {
            stmt.bindLong(4, helpfulConverter.convertToDatabaseValue(helpful));
        }
        stmt.bindLong(5, entity.getLikeCount());
        stmt.bindLong(6, entity.getHaveImage() ? 1L: 0L);
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(7, state);
        }
 
        String updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindString(8, updated);
        }
 
        String created = entity.getCreated();
        if (created != null) {
            stmt.bindString(9, created);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookReviewBean entity) {
        stmt.clearBindings();
 
        String _id = entity.get_id();
        if (_id != null) {
            stmt.bindString(1, _id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        BookBean book = entity.getBook();
        if (book != null) {
            stmt.bindString(3, bookConverter.convertToDatabaseValue(book));
        }
 
        BookHelpfulBean helpful = entity.getHelpful();
        if (helpful != null) {
            stmt.bindLong(4, helpfulConverter.convertToDatabaseValue(helpful));
        }
        stmt.bindLong(5, entity.getLikeCount());
        stmt.bindLong(6, entity.getHaveImage() ? 1L: 0L);
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(7, state);
        }
 
        String updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindString(8, updated);
        }
 
        String created = entity.getCreated();
        if (created != null) {
            stmt.bindString(9, created);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public BookReviewBean readEntity(Cursor cursor, int offset) {
        BookReviewBean entity = new BookReviewBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : bookConverter.convertToEntityProperty(cursor.getString(offset + 2)), // book
            cursor.isNull(offset + 3) ? null : helpfulConverter.convertToEntityProperty(cursor.getLong(offset + 3)), // helpful
            cursor.getInt(offset + 4), // likeCount
            cursor.getShort(offset + 5) != 0, // haveImage
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // state
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // updated
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // created
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookReviewBean entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBook(cursor.isNull(offset + 2) ? null : bookConverter.convertToEntityProperty(cursor.getString(offset + 2)));
        entity.setHelpful(cursor.isNull(offset + 3) ? null : helpfulConverter.convertToEntityProperty(cursor.getLong(offset + 3)));
        entity.setLikeCount(cursor.getInt(offset + 4));
        entity.setHaveImage(cursor.getShort(offset + 5) != 0);
        entity.setState(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUpdated(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreated(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(BookReviewBean entity, long rowId) {
        return entity.get_id();
    }
    
    @Override
    public String getKey(BookReviewBean entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookReviewBean entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
