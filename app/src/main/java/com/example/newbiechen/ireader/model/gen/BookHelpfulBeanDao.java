package com.example.newbiechen.ireader.model.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.newbiechen.ireader.model.bean.BookHelpfulBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_HELPFUL_BEAN".
*/
public class BookHelpfulBeanDao extends AbstractDao<BookHelpfulBean, Long> {

    public static final String TABLENAME = "BOOK_HELPFUL_BEAN";

    /**
     * Properties of entity BookHelpfulBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Total = new Property(1, int.class, "total", false, "TOTAL");
        public final static Property No = new Property(2, int.class, "no", false, "NO");
        public final static Property Yes = new Property(3, int.class, "yes", false, "YES");
    }


    public BookHelpfulBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BookHelpfulBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_HELPFUL_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"TOTAL\" INTEGER NOT NULL ," + // 1: total
                "\"NO\" INTEGER NOT NULL ," + // 2: no
                "\"YES\" INTEGER NOT NULL );"); // 3: yes
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_HELPFUL_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookHelpfulBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getTotal());
        stmt.bindLong(3, entity.getNo());
        stmt.bindLong(4, entity.getYes());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookHelpfulBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getTotal());
        stmt.bindLong(3, entity.getNo());
        stmt.bindLong(4, entity.getYes());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public BookHelpfulBean readEntity(Cursor cursor, int offset) {
        BookHelpfulBean entity = new BookHelpfulBean( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // total
            cursor.getInt(offset + 2), // no
            cursor.getInt(offset + 3) // yes
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookHelpfulBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setTotal(cursor.getInt(offset + 1));
        entity.setNo(cursor.getInt(offset + 2));
        entity.setYes(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BookHelpfulBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BookHelpfulBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookHelpfulBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
